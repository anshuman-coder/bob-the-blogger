// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id            String   @id @default(cuid())
    authorId      String   @map("author_id")
    title         String   @unique
    description   String   @db.Text
    slug          String   @unique
    featuredImage String?  @map("featured_image")
    html          String?  @db.Text
    text          String?  @db.Text
    createdAt     DateTime @default(now()) @map("created_at")
    updatedAt     DateTime @updatedAt @map("updated_at")

    author    User         @relation(fields: [authorId], references: [id])
    tags      PostTagMap[]
    bookmarks Bookmark[]
    likes     Like[]

    @@map("post")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("account")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("session")
}

enum UserRole {
    client
    admin
}

model User {
    id            String    @id @default(cuid())
    username      String    @unique
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    role          UserRole  @default(client)
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")

    accounts   Account[]
    sessions   Session[]
    posts      Post[]
    tags       Tag[]
    bookmarks  Bookmark[]
    followers  Follower[] @relation("user_follower")
    followings Follower[] @relation("user_following")
    likes      Like[]

    @@map("user")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_token")
}

model PostTagMap {
    id        String   @id @default(cuid())
    postId    String   @map("post_id")
    tagId     String   @map("tag_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    post Post @relation(fields: [postId], references: [id])
    tag  Tag  @relation(fields: [tagId], references: [id])

    @@map("post_tag_map")
}

model Tag {
    id          String   @id @default(cuid())
    userId      String   @map("user_id")
    name        String   @unique
    description String   @db.Text
    slug        String
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    creator User         @relation(fields: [userId], references: [id])
    posts   PostTagMap[]

    @@map("tag")
}

model Bookmark {
    id        String   @id @default(cuid())
    userId    String   @map("user_id")
    postId    String   @map("post_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    post Post @relation(fields: [postId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@map("bookmark")
}

model Follower {
    id          String   @id @default(cuid())
    followerId  String   @map("follower_id")
    followingId String   @map("following_id")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    follower  User @relation("user_follower", fields: [followerId], references: [id])
    following User @relation("user_following", fields: [followingId], references: [id])

    @@map("follower")
}

model Like {
    id        String   @id @default(cuid())
    postId    String   @map("post_id")
    userId    String   @map("user_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    post Post @relation(fields: [postId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@map("like")
}
